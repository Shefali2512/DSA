#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}


long long minimumDifference(int* nums, int numsSize) {
    int n = numsSize / 3;
    long long leftMax[2 * n + 1], rightMin[2 * n + 1];

    qsort(nums, numsSize, sizeof(int), compare);

    long long leftSum = 0;
    for (int i = numsSize - 1; i >= numsSize - n; i--) {
        leftSum += nums[i];
    }
    leftMax[n] = leftSum;

    for (int i = numsSize - n - 1; i >= n; i--) {
        leftSum += nums[i] - nums[i + n];
        leftMax[i] = leftSum;
    }

   
    long long rightSum = 0;
    for (int i = 0; i < n; i++) {
        rightSum += nums[i];
    }
    rightMin[n] = rightSum;

    for (int i = n; i < 2 * n; i++) {
        rightSum += nums[i] - nums[i - n];
        rightMin[i + 1] = rightSum;
    }


    long long minDiff = LLONG_MAX;
    for (int i = n; i <= 2 * n; i++) {
        long long diff = leftMax[i] - rightMin[i];
        if (llabs(diff) < minDiff) {
            minDiff = llabs(diff);
        }
    }

    return minDiff;
}
